/*******************************************************************************************
*
*   raylib [audio] example - Music playing (streaming)
*
*   Example originally created with raylib 1.3, last time updated with raylib 4.0
*
*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
*   BSD-like license that allows static linking with closed source software
*
*   Copyright (c) 2015-2023 Ramon Santamaria (@raysan5)
*
********************************************************************************************/
#include <stdio.h>
#include "raylib.h"
// Music management functions
//RLAPI Music LoadMusicStream(const char *fileName);                    // Load music stream from file
//RLAPI Music LoadMusicStreamFromMemory(const char *fileType, const unsigned char *data, int dataSize); // Load music stream from data
//RLAPI bool IsMusicReady(Music music);                                 // Checks if a music stream is ready
//RLAPI void UnloadMusicStream(Music music);                            // Unload music stream
//RLAPI void PlayMusicStream(Music music);                              // Start music playing
//RLAPI bool IsMusicStreamPlaying(Music music);                         // Check if music is playing
//RLAPI void UpdateMusicStream(Music music);                            // Updates buffers for music streaming
//RLAPI void StopMusicStream(Music music);                              // Stop music playing
//RLAPI void PauseMusicStream(Music music);                             // Pause music playing
//RLAPI void ResumeMusicStream(Music music);                            // Resume playing paused music
//RLAPI void SeekMusicStream(Music music, float position);              // Seek music to a position (in seconds)
//RLAPI void SetMusicVolume(Music music, float volume);                 // Set volume for music (1.0 is max level)
//RLAPI void SetMusicPitch(Music music, float pitch);                   // Set pitch for a music (1.0 is base level)
//RLAPI void SetMusicPan(Music music, float pan);                       // Set pan for a music (0.5 is center)
//RLAPI float GetMusicTimeLength(Music music);                          // Get music time length (in seconds)
//RLAPI float GetMusicTimePlayed(Music music);                          // Get current music time played (in seconds)
enum STATUS {RIGHT, LEFT};

typedef struct{
    float largura;
    float altura;
}Dimensao;

typedef struct{
    int Idle;
    int Run;
    int Attack;
}Status;
typedef struct{
    Rectangle barra;   
}Vida;
typedef struct{
    float posX;
    float posY;
    int postura;
}Dados;
int main(void)
{   
    Color amarelo_claro={220,220,0,255},vermelho_claro={ 140, 0, 0, 255 };  
    Dimensao frameIdle1,frameIdle2; // variável referente a um frame da postura idle
    Dimensao frameRun1,frameRun2;  // variável referente a um frame da postura run
    Dimensao frameAttack1,frameAttack2; // variável referente a um frame da postura de ataque
    Dimensao player1Dead,player2Dead;
    Status maxFrame1,maxFrame2;
    Dados player1;
    player1.posX = 200;       
    player1.posY = 800;
    player1.postura = RIGHT;
    Rectangle aquiles={200,800};
    Vida vida_aquiles;
    vida_aquiles.barra={270,70,350,20};   
    Dados player2;
    player2.posX = 1000;       
    player2.posY = 800;
    player2.postura = LEFT;
    Rectangle heitor={1000,800};
    Vida vida_heitor;
    vida_heitor.barra={920,70,350,20};   
    const int SCREEN_WIDTH = 1500;
    const int SCREEN_HEIGHT = 1000;
    bool janela_inicial=true;
    bool tela_carregamento=false;
    bool jogo_rodando = false;   
    bool janela_config = false;
    bool aquiles_win=false,heitor_win=false;
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "teste de telas");
    SetTargetFPS(60);
    Rectangle config={1270,30,220,30},config_close={1453,55,20,20},config_lines{1280, 63,200, 100},
              button_jogar={SCREEN_WIDTH/2-130,SCREEN_HEIGHT/2,230,80},button_voltar{5, 5,30, 30},
              retangulo_carregamento{600,900,0,15},retangulo_carregamento_lines{600,900,240,15},
              vida_aquiles_linha{270,70,350,20},vida_heitor_linha{920,70,350,20},
              vida_aquiles_fundo={270,70,350,20},vida_heitor_fundo{920,70,350,20},
              end_of_game{SCREEN_WIDTH/2-130,SCREEN_HEIGHT/2-50,300,175},button_restart{end_of_game.x+70,end_of_game.y+100,160,20};             
    //////////////////////////////////////////////////////   
    
    Image background = LoadImage("background1.png");
    Image carregamento = LoadImage("carregamento.png");
    Image fundofinal=LoadImage("fundofinal.png");
    Image c=LoadImage("textura_config1.png");
    Image v=LoadImage("Versus.png");
    Texture2D versus= LoadTextureFromImage(v);  
    Texture2D configuracoes= LoadTextureFromImage(c);   
    Texture2D desert = LoadTextureFromImage(background);
    Texture2D telacarregamento=LoadTextureFromImage(carregamento);
    Texture2D fundojogo=LoadTextureFromImage(fundofinal);
    UnloadImage(background);
    UnloadImage(carregamento);
    UnloadImage(fundofinal);
    UnloadImage(c);
    UnloadImage(v);

    /////////////////////////////////////////////////////
    
    Texture2D aquilesIdleRight  = LoadTexture("aquilesidle_direita.png");
    Texture2D aquilesIdleLeft  = LoadTexture("aquilesidle_esquerda.png");
    Texture2D aquilesRunRight  = LoadTexture("aquilesrun_direita.png");
    Texture2D aquilesRunLeft  = LoadTexture("aquilesrun_esquerda.png");
    Texture2D aquilesAttackRight  = LoadTexture("aquilesataque_direita.png");
    Texture2D aquilesAttackLeft  = LoadTexture("aquilesataque_esquerda.png");
    Texture2D aquiles_died = LoadTexture("aquiles_dead.png");
    Texture2D aquiles_died2 = LoadTexture("aquiles_dead2.png");
    //
    Texture2D heitorIdleRight  = LoadTexture("heitoridle_direita.png");
    Texture2D heitorIdleLeft  = LoadTexture("heitoridle_esquerda.png");
    Texture2D heitorRunRight  = LoadTexture("heitorrun_direita.png");
    Texture2D heitorRunLeft  = LoadTexture("heitorrun_esquerda.png");
    Texture2D heitorAttackRight  = LoadTexture("heitorataque_direita.png");
    Texture2D heitorAttackLeft  = LoadTexture("heitorataque_esquerda.png");
    Texture2D heitor_died= LoadTexture("heitor_dead.png");
    Texture2D heitor_died2= LoadTexture("heitor_dead2.png");
    //////////////////////////////////////////////////////////////////
    maxFrame1.Idle = 6;
    maxFrame1.Run = 6;
    maxFrame1.Attack = 4;
    maxFrame2.Idle = 5;
    maxFrame2.Run = 6;
    maxFrame2.Attack = 4;
    //aquiles sizes
    frameIdle1.largura = (float)aquilesIdleRight.width / maxFrame1.Idle;
    frameRun1.largura = (float)aquilesRunRight.width / maxFrame1.Run;
    frameAttack1.largura = (float)aquilesAttackRight.width / maxFrame1.Attack;
    player1Dead.largura =(float)aquiles_died.width/4;
    //heitor sizes
    frameIdle2.largura = (float)heitorIdleRight.width / maxFrame2.Idle;
    frameRun2.largura = (float)heitorRunRight.width / maxFrame2.Run;
    frameAttack2.largura = (float)heitorAttackRight.width / maxFrame2.Attack;
    player2Dead.largura =(float)heitor_died.width/4;
    //
    aquiles.width=frameAttack1.largura;
    heitor.width=frameAttack2.largura;
    int frame = 0;
    float timer = 0.0;
    //////////////////////////////////////////////////////////////////////
    Vector2 position = { (float)(SCREEN_WIDTH/2 - desert.width/2), (float)(SCREEN_HEIGHT/2 - desert.height/2 - 20) };
    InitAudioDevice();// Initialize audio device
    Music music = LoadMusicStream("musica_jogo.mp3");
    PlayMusicStream(music);
    //float timePlayed = 0.0f;
    float rectTime= 0.0f,rectSize=1.0f;
    float rectSpeed=10.0f;
    int apertei_voltar=0;
    int i=0;
    SetTargetFPS(60);  
    //DARKGREEN  CLITERAL(Color){ 0, 117, 44, 255 }     
    //ORANGE     CLITERAL(Color){ 255, 161, 0, 255 }
    //YELLOW     CLITERAL(Color){ 253, 249, 0, 255 }   
    //RED        CLITERAL(Color){ 230, 41, 55, 255 } 
    //
    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {   
        float diminui_vida_aquiles(float);
        void diminui_vida_heitor(float *,float *);
        void carregaImagemaquiles(Texture2D Imagem, int Frame, float larguraFrame,
                            float *const PosX, float *const PosY, long int Tecla);
        void carregaImagemheitor(Texture2D Imagem, int Frame, float larguraFrame,
                            float *const PosX, float *const PosY, long int Tecla);
        UpdateMusicStream(music);
        //timePlayed = GetMusicTimePlayed(music)/GetMusicTimeLength(music);        // Update music buffer with new stream data        
        if(janela_inicial){//esta sera a janela inicial, onde sera a melhor oportunidade para testar 
                           //a manipulacao de audio do menu congig

                           //indico testar aqui, pois sera mais dificil de se perder aqui.
                           //
            if(!janela_config){
                BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawTexture(desert, position.x, position.y, WHITE);
                DrawTexture(configuracoes, 1400, 20, BLACK);
                DrawText("Jogar", SCREEN_WIDTH/2-130, SCREEN_HEIGHT/2, 80, WHITE);              
                if (CheckCollisionPointRec(GetMousePosition(), config)){                                     
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        janela_config=true;    
                    }
                }
                if (CheckCollisionPointRec(GetMousePosition(), button_jogar)){
                    DrawText("Jogar", SCREEN_WIDTH/2-130, SCREEN_HEIGHT/2, 80, LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){                        
                        tela_carregamento=true;  
                        janela_inicial=false;
                    }
                }
                EndDrawing();
            }
            else{          
                BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawTexture(desert, position.x, position.y, WHITE);
                DrawText("Jogar", SCREEN_WIDTH/2-130, SCREEN_HEIGHT/2, 80, WHITE);
                DrawTexture(configuracoes, 1425, 8, BLACK);                            
                ////////////////////////////////////////////////
                DrawRectangleRoundedLines(config_lines, 0.3, 1000, 3, BLACK);                
                DrawText("MUSIC on/off",1300,80,20,BLACK);
                DrawText("SOUND on/off",1300,110,20,BLACK);
                DrawText("x",1453,55,30,GRAY);
                ////////////////////////////////////////////////
                
                if(CheckCollisionPointRec(GetMousePosition(),config_close)){
                    DrawText("x",1453,55,30,RED);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        janela_config=false;    
                    }
                }
                if (CheckCollisionPointRec(GetMousePosition(), button_jogar)){
                    DrawText("Jogar", SCREEN_WIDTH/2-130, SCREEN_HEIGHT/2, 80, LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        tela_carregamento=true;
                        janela_inicial=false;
                    }
                }
                EndDrawing();
            }
        }
        if(tela_carregamento){// esta e a tela de carregamento, o ideal seria ter uma introducao da guerra de troia aqui
                              // se quiser aumentar o timer da tela de carregamento, me pergunbta que posso alterar
            BeginDrawing();
            ClearBackground(RAYWHITE);
            DrawTexture(telacarregamento, position.x, position.y,WHITE);
            DrawRectangleLines(5, 5,30, 30,WHITE);
            DrawText("<-",6,5,30,WHITE);
            apertei_voltar=0;
            if(CheckCollisionPointRec(GetMousePosition(),button_voltar)){
                DrawText("<-",6,5,30,LIGHTGRAY);
                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                    tela_carregamento=false; 
                    janela_inicial=true;
                    apertei_voltar=1;
                }
            }
            rectTime += GetFrameTime();
            if (rectTime >= 20.0f||apertei_voltar){
                tela_carregamento=false;
                if(!janela_inicial)jogo_rodando=true;
                rectSize=0.0f;
                retangulo_carregamento.width=0.0f;
                rectTime=0.0f;
            }
            rectSize += rectSpeed * GetFrameTime();
            retangulo_carregamento.width = rectSize+38;
            
            DrawRectangleRoundedLines(retangulo_carregamento_lines,0.5,1000,2, WHITE);
            DrawRectangleRounded(retangulo_carregamento,0.5,1000, WHITE);
            EndDrawing();
        }
        if(jogo_rodando){
            if(!janela_config){// mesma ideia da janela inicial, quando a janela de config esta fechada
                               //perceba que o codigo sera uma copia do outro, mas com uma adicao de janela
                BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawTexture(fundojogo, position.x, position.y,WHITE);
                DrawTexture(configuracoes, 1400, 20, WHITE);
                DrawTexture(versus,680,30,WHITE);
                DrawRectangleLines(5, 5,30, 30,WHITE);
                DrawText("<-",6,5,30,WHITE);
                //////vida do aquiles              
                if(vida_aquiles.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, LIME);
                }
                else if(vida_aquiles.barra.width>150.0f&&vida_aquiles.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, amarelo_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, YELLOW);
                }
                else if(vida_aquiles.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, RED);
                }
                //////vida do heitor
                if(vida_heitor.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, LIME);
                }
                else if(vida_heitor.barra.width>150.0f&&vida_heitor.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,amarelo_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, YELLOW);
                }
                else if(vida_heitor.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, RED);
                }
                
                if (CheckCollisionPointRec(GetMousePosition(), config)){                                     
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        janela_config=true;    
                    }
                }
                if(CheckCollisionPointRec(GetMousePosition(),button_voltar)){
                    DrawText("<-",6,5,30,LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        jogo_rodando=false; 
                        janela_inicial=true;
                    }
                }
                if (IsKeyUp(KEY_A) && IsKeyUp(KEY_D) && IsKeyUp(KEY_W)){
                    if (frame >= maxFrame1.Idle){
                            frame = 0;
                    }
                    if (player1.postura == RIGHT){
                        carregaImagemaquiles(aquilesIdleRight, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                    
                    }
                    else if (player1.postura == LEFT){
                        carregaImagemaquiles(aquilesIdleLeft, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                        
                    }
                }
                else{
                    if (IsKeyDown(KEY_A)){
                        player1.postura = LEFT;
                        if (frame >= maxFrame1.Run){
                            frame = 0;
                        }
                        carregaImagemaquiles(aquilesRunLeft, frame, frameRun1.largura, 
                        &player1.posX, &player1.posY, KEY_A);  
                        //printf("frame RunLeft: %d\n", frame);
                    }
                    else if (IsKeyDown(KEY_D)){
                        player1.postura = RIGHT;
                        if (frame >= maxFrame1.Run){
                            frame = 0;
                        }
                        carregaImagemaquiles(aquilesRunRight, frame, frameRun1.largura, 
                        &player1.posX, &player1.posY, KEY_D);
                        
                    }
                    else if (IsKeyDown(KEY_W)){
                        if (frame >= maxFrame1.Attack){
                            frame = 0;
                        }
                        if (player1.postura == RIGHT){
                            carregaImagemaquiles(aquilesAttackRight, frame, frameAttack1.largura, 
                            &player1.posX, &player1.posY, KEY_W);
                            if( ( (aquiles.x + aquiles.width-40)> (heitor.x) )&&( (aquiles.x+aquiles.width)<(heitor.x+heitor.width+30) ) ){
                                diminui_vida_heitor(&vida_heitor.barra.width,&vida_heitor.barra.x);                                
                            }
                        }
                        else if (player1.postura == LEFT){
                            carregaImagemaquiles(aquilesAttackLeft, frame, frameAttack1.largura, 
                            &player1.posX, &player1.posY, KEY_W);
                            if( ( (aquiles.x) < (heitor.x+heitor.width-40) )&&( (aquiles.x)>(heitor.x) ) ){
                                diminui_vida_heitor(&vida_heitor.barra.width,&vida_heitor.barra.x);
                            }
                        }
                    }
                    //atualizar a posicao do retangulo que contem o boneco1
                    aquiles.x=player1.posX;
                    aquiles.y=player1.posY;
                }
         
                if (IsKeyUp(KEY_J) && IsKeyUp(KEY_L) && IsKeyUp(KEY_I)){
                    if (frame >= maxFrame2.Idle){
                            frame = 0;
                    }
                    if (player2.postura == RIGHT){
                        carregaImagemheitor(heitorIdleRight, frame, frameIdle2.largura, 
                        &player2.posX, &player2.posY, KEY_NULL);
                    
                    }
                    else if (player2.postura == LEFT){
                        carregaImagemheitor(heitorIdleLeft, frame, frameIdle2.largura, 
                        &player2.posX, &player2.posY, KEY_NULL);
                        
                    }
                }
                else{
                    if (IsKeyDown(KEY_J)){
                        player2.postura = LEFT;
                        if (frame >= maxFrame2.Run){
                            frame = 0;
                        }
                        carregaImagemheitor(heitorRunLeft, frame, frameRun2.largura, 
                        &player2.posX, &player2.posY, KEY_J);  
                        //printf("frame RunLeft: %d\n", frame);
                    }
                    else if (IsKeyDown(KEY_L)){
                        player2.postura = RIGHT;
                        if (frame >= maxFrame2.Run){
                            frame = 0;
                        }
                        carregaImagemheitor(heitorRunRight, frame, frameRun2.largura, 
                        &player2.posX, &player2.posY, KEY_L);
                        
                    }
                    else if (IsKeyDown(KEY_I)){
                        if (frame >= maxFrame2.Attack){
                            frame = 0;
                        }
                        if (player2.postura == RIGHT){
                            carregaImagemheitor(heitorAttackRight, frame, frameAttack2.largura, 
                            &player2.posX, &player2.posY, KEY_I);
                            if( ( (heitor.x + heitor.width-40)> (aquiles.x) )&&( (heitor.x+heitor.width)<(aquiles.x+aquiles.width+30) ) ){
                                vida_aquiles.barra.width=diminui_vida_aquiles(vida_aquiles.barra.width);                               
                            }
                            
                        }
                        else if (player2.postura == LEFT){
                            carregaImagemheitor(heitorAttackLeft, frame, frameAttack2.largura, 
                            &player2.posX, &player2.posY, KEY_I);
                            if( ( (heitor.x) < (aquiles.x+aquiles.width-40) )&&( (heitor.x)>(aquiles.x) ) ){
                                vida_aquiles.barra.width=diminui_vida_aquiles(vida_aquiles.barra.width);                                
                            }
                        }
                        
                    } 
                    //atualizar a posicao do retangulo que contem o boneco2
                    heitor.x=player2.posX;
                    heitor.y=player2.posY;               
                }
                EndDrawing();
            }
            else{// mesma ideia da janela inicial, quando a janela de config esta fechada
                //perceba que o codigo sera uma copia do outro, mas com uma adicao de janela
                BeginDrawing();             
                ClearBackground(RAYWHITE);
                DrawTexture(fundojogo, position.x, position.y,WHITE);
                DrawTexture(versus,680,30,WHITE);
                //vida dos personagens
                if(vida_aquiles.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, LIME);
                }
                else if(vida_aquiles.barra.width>150.0f&&vida_aquiles.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, amarelo_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, YELLOW);
                }
                else if(vida_aquiles.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, RED);
                }
                //////vida do heitor
                if(vida_heitor.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, LIME);
                }
                else if(vida_heitor.barra.width>150.0f&&vida_heitor.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000, amarelo_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, YELLOW);
                }
                else if(vida_heitor.barra.width<150.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, RED);
                }  
                //
                DrawRectangleLines(5, 5,30, 30,WHITE);
                DrawText("<-",6,5,30,WHITE);
                if (CheckCollisionPointRec(GetMousePosition(), config)){                                     
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        janela_config=false;    
                    }
                }
                if(CheckCollisionPointRec(GetMousePosition(),button_voltar)){
                    DrawText("<-",6,5,30,LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        jogo_rodando=false; 
                        janela_inicial=true;
                    }
                }
                if (IsKeyUp(KEY_A) && IsKeyUp(KEY_D) && IsKeyUp(KEY_W)){
                    if (frame >= maxFrame1.Idle){
                            frame = 0;
                    }
                    if (player1.postura == RIGHT){
                        carregaImagemaquiles(aquilesIdleRight, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                    
                    }
                    else if (player1.postura == LEFT){
                        carregaImagemaquiles(aquilesIdleLeft, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                        
                    }
                }
                else{
                    if (IsKeyDown(KEY_A)){
                        player1.postura = LEFT;
                        if (frame >= maxFrame1.Run){
                            frame = 0;
                        }
                        carregaImagemaquiles(aquilesRunLeft, frame, frameRun1.largura, 
                        &player1.posX, &player1.posY, KEY_A);  
                        //printf("frame RunLeft: %d\n", frame);
                    }
                    else if (IsKeyDown(KEY_D)){
                        player1.postura = RIGHT;
                        if (frame >= maxFrame1.Run){
                            frame = 0;
                        }
                        carregaImagemaquiles(aquilesRunRight, frame, frameRun1.largura, 
                        &player1.posX, &player1.posY, KEY_D);
                        
                    }
                    else if (IsKeyDown(KEY_W)){
                        if (frame >= maxFrame1.Attack){
                            frame = 0;
                        }
                        if (player1.postura == RIGHT){
                            carregaImagemaquiles(aquilesAttackRight, frame, frameAttack1.largura, 
                            &player1.posX, &player1.posY, KEY_W);
                            
                        }
                        else if (player1.postura == LEFT){
                            carregaImagemaquiles(aquilesAttackLeft, frame, frameAttack1.largura, 
                            &player1.posX, &player1.posY, KEY_W);
                            
                        }
                    }
                    aquiles.x=player1.posX;
                    aquiles.y=player1.posY;
                }
                if (IsKeyUp(KEY_J) && IsKeyUp(KEY_L) && IsKeyUp(KEY_I)){
                    if (frame >= maxFrame2.Idle){
                            frame = 0;
                    }
                    if (player2.postura == RIGHT){
                        carregaImagemheitor(heitorIdleRight, frame, frameIdle2.largura, 
                        &player2.posX, &player2.posY, KEY_NULL);
                    
                    }
                    else if (player2.postura == LEFT){
                        carregaImagemheitor(heitorIdleLeft, frame, frameIdle2.largura, 
                        &player2.posX, &player2.posY, KEY_NULL);
                        
                    }
                }
                else{
                    if (IsKeyDown(KEY_J)){
                        player2.postura = LEFT;
                        if (frame >= maxFrame2.Run){
                            frame = 0;
                        }
                        carregaImagemheitor(heitorRunLeft, frame, frameRun2.largura, 
                        &player2.posX, &player2.posY, KEY_J);  
                        //printf("frame RunLeft: %d\n", frame);
                    }
                    else if (IsKeyDown(KEY_L)){
                        player2.postura = RIGHT;
                        if (frame >= maxFrame2.Run){
                            frame = 0;
                        }
                        carregaImagemheitor(heitorRunRight, frame, frameRun2.largura, 
                        &player2.posX, &player2.posY, KEY_L);
                        
                    }
                    else if (IsKeyDown(KEY_I)){
                        if (frame >= maxFrame2.Attack){
                            frame = 0;
                        }
                        if (player2.postura == RIGHT){
                            carregaImagemheitor(heitorAttackRight, frame, frameAttack2.largura, 
                            &player2.posX, &player2.posY, KEY_I);
                            
                        }
                        else if (player2.postura == LEFT){
                            carregaImagemheitor(heitorAttackLeft, frame, frameAttack2.largura, 
                            &player2.posX, &player2.posY, KEY_I);
                            
                        }
                    }
                    heitor.x=player2.posX;
                    heitor.y=player2.posY;
                }                 
                DrawTexture(configuracoes, 1425, 8, BLACK);                            
                ////////////////////////////////////////////////
                DrawRectangleRoundedLines(config_lines, 0.3, 1000, 3, BLACK);                
                DrawText("MUSIC on/off",1300,80,20,BLACK);
                DrawText("SOUND on/off",1300,110,20,BLACK);
                DrawText("x",1453,55,30,GRAY);
                ////////////////////////////////////////////////
                
                if(CheckCollisionPointRec(GetMousePosition(),config_close)){
                    DrawText("x",1453,55,30,RED);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        janela_config=false;    
                    }
                }
                EndDrawing();
            }
            if (timer >= 0.2){
                // atualiza o frame
                void atualizaFrame(float *const ptrTimer, int *const ptrFrame);
                atualizaFrame(&timer, &frame);
            }
            timer += GetFrameTime();
            if(vida_heitor.barra.width==0.0f){//aqui vamos averiguar qual dos personagens morre primeiro
                jogo_rodando=false;
                aquiles_win=true;
                frame=0;
            } 
            if(vida_aquiles.barra.width==0.0f){
                jogo_rodando=false;
                heitor_win=true;
                frame=0;
            }
        }
        //----------------------------------------------------------------------------------
        
        if(aquiles_win){//aqui sera a janela de frames que aquiles ganha, com heitor morrendo
            
            BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawTexture(fundojogo, position.x, position.y,WHITE);
                DrawTexture(configuracoes, 1400, 20, WHITE);
                DrawTexture(versus,680,30,WHITE);
                DrawRectangleLines(5, 5,30, 30,WHITE);
                DrawText("<-",6,5,30,WHITE);
                
                //////vida do aquiles              
                if(vida_aquiles.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, LIME);
                }
                else if(vida_aquiles.barra.width>150.0f&&vida_aquiles.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, amarelo_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, YELLOW);
                }
                else if(vida_aquiles.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, RED);
                }
                //////vida do heitor
                if(vida_heitor.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, LIME);
                }
                else if(vida_heitor.barra.width>150.0f&&vida_heitor.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,amarelo_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, YELLOW);
                }
                else if(vida_heitor.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, RED);
                }
                //                
                if(CheckCollisionPointRec(GetMousePosition(),button_voltar)){
                    DrawText("<-",6,5,30,LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        aquiles_win=false; 
                        janela_inicial=true;
                    }
                }
                if (IsKeyUp(KEY_A) && IsKeyUp(KEY_D) && IsKeyUp(KEY_W)){
                    
                    if (player1.postura == RIGHT){
                        carregaImagemaquiles(aquilesIdleRight, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                    
                    }
                    else if (player1.postura == LEFT){
                        carregaImagemaquiles(aquilesIdleLeft, frame, frameIdle1.largura, 
                        &player1.posX, &player1.posY, KEY_NULL);
                        
                    }
                }                                         
                if (player2.postura == RIGHT){
                    if(frame<4){
                        carregaImagemheitor(heitor_died, frame, player2Dead.largura, 
                                &player2.posX, &player2.posY, KEY_NULL);        
                    }
                }
                else if (player2.postura == LEFT){
                    if(frame<4){
                        carregaImagemheitor(heitor_died2, frame, player2Dead.largura, 
                                &player2.posX, &player2.posY, KEY_NULL);
                    }    
                }              
                if(frame<4){
                    if (timer >= 0.3){                        
                        // atualiza o frame
                        void atualizaFrame(float *const ptrTimer, int *const ptrFrame);
                        atualizaFrame(&timer, &frame);
                    }
                }
                timer += GetFrameTime();
                if(frame==4){
                    if (player2.postura == RIGHT){
                        DrawTextureRec(heitor_died,(Rectangle){(float)player2Dead.largura*3,0,player2Dead.largura,heitor_died.height},(Vector2){player2.posX, player2.posY},WHITE);
                    }
                    if (player2.postura == LEFT){
                        DrawTextureRec(heitor_died2,(Rectangle){(float)0*player2Dead.largura,0,player2Dead.largura,heitor_died.height},(Vector2){player2.posX, player2.posY},WHITE);
                    }
                }
                //pequeno texto de vitoria e botao para reiniciar game                
                DrawRectangleRoundedLines(end_of_game, 0.3, 1000, 3, BLACK);
                DrawRectangleRounded(end_of_game, 0.3, 1000, BLANK);
                DrawRectangleRoundedLines(button_restart,0.3,1000,2,BLACK);
                DrawText("AQUILES WINS",end_of_game.x+40,end_of_game.y+40,30,BLACK);
                DrawText("Restart Game",end_of_game.x+80,end_of_game.y+100,20,BLACK);
                if(CheckCollisionPointRec(GetMousePosition(),button_restart)){
                    DrawText("Restart Game",end_of_game.x+80,end_of_game.y+100,20,RED);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        aquiles_win=false; 
                        janela_inicial=true;
                    }
                }
            EndDrawing();
        }
           
        if(heitor_win){//aqui seria o frame que heitor ganha, com aquiles morrendo.
            BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawTexture(fundojogo, position.x, position.y,WHITE);
                DrawTexture(configuracoes, 1400, 20, WHITE);
                DrawTexture(versus,680,30,WHITE);
                DrawRectangleLines(5, 5,30, 30,WHITE);
                DrawText("<-",6,5,30,WHITE);
                
                //////vida do aquiles              
                if(vida_aquiles.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, LIME);
                }
                else if(vida_aquiles.barra.width>150.0f&&vida_aquiles.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000, amarelo_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, YELLOW);
                }
                else if(vida_aquiles.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_aquiles_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_aquiles_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_aquiles.barra, 0.5,1000, RED);
                }
                //////vida do heitor
                if(vida_heitor.barra.width>250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GREEN);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000, DARKGREEN);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, LIME);
                }
                else if(vida_heitor.barra.width>150.0f&&vida_heitor.barra.width<250.0f){
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, GOLD);                   
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,amarelo_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, YELLOW);
                }
                else if(vida_heitor.barra.width<150.0f){          
                    DrawRectangleRoundedLines(vida_heitor_linha,0.5,1000,3, MAROON);
                    DrawRectangleRounded(vida_heitor_fundo, 0.5,1000,vermelho_claro);
                    DrawRectangleRounded(vida_heitor.barra, 0.5,1000, RED);
                }
                //                
                if(CheckCollisionPointRec(GetMousePosition(),button_voltar)){
                    DrawText("<-",6,5,30,LIGHTGRAY);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        aquiles_win=false; 
                        janela_inicial=true;
                    }
                }                                  
                if (player2.postura == RIGHT){
                    carregaImagemheitor(heitorIdleRight, frame, frameIdle2.largura, 
                    &player2.posX, &player2.posY, KEY_NULL);                    
                }
                else if (player2.postura == LEFT){
                    carregaImagemheitor(heitorIdleLeft, frame, frameIdle2.largura, 
                    &player2.posX, &player2.posY, KEY_NULL);                        
                }
                if (player1.postura == RIGHT){
                    if(frame<4){
                        carregaImagemaquiles(aquiles_died, frame, player1Dead.largura, 
                                &player1.posX, &player1.posY, KEY_NULL);        
                    }
                }
                else if (player1.postura == LEFT){
                    if(frame<4){
                        carregaImagemaquiles(aquiles_died2, frame, player1Dead.largura, 
                                &player1.posX, &player1.posY, KEY_NULL);
                    }    
                }
                if(frame<4){
                    if (timer >= 0.3){                        
                        // atualiza o frame
                        void atualizaFrame(float *const ptrTimer, int *const ptrFrame);
                        atualizaFrame(&timer, &frame);
                    }
                }
                timer += GetFrameTime();
                if(frame==4){
                    if (player1.postura == RIGHT){
                        DrawTextureRec(aquiles_died,(Rectangle){(float)player1Dead.largura*3,0,player1Dead.largura,aquiles_died.height},(Vector2){player1.posX, player1.posY},WHITE);
                    }
                    if (player1.postura == LEFT){
                        DrawTextureRec(aquiles_died2,(Rectangle){(float)0*player1Dead.largura,0,player1Dead.largura,aquiles_died2.height},(Vector2){player1.posX, player1.posY},WHITE);
                    }
                }
                //pequeno texto de vitoria e botao para reiniciar game 
                DrawRectangleRoundedLines(end_of_game, 0.3, 1000, 3, BLACK);
                DrawRectangleRounded(end_of_game, 0.3, 1000, BLANK);
                DrawRectangleRoundedLines(button_restart,0.3,1000,2,BLACK);
                DrawText("HEITOR WINS",end_of_game.x+40,end_of_game.y+40,30,BLACK);
                DrawText("Restart Game",end_of_game.x+80,end_of_game.y+100,20,BLACK);
                if(CheckCollisionPointRec(GetMousePosition(),button_restart)){
                    DrawText("Restart Game",end_of_game.x+80,end_of_game.y+100,20,RED);
                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){
                        heitor_win=false; 
                        janela_inicial=true;
                    }
                }
            EndDrawing();
        }
    }             
    // De-Initialization
    //--------------------------------------------------------------------------------------
    UnloadMusicStream(music);   // Unload music stream buffers from RAM

    CloseAudioDevice();         // Close audio device (music streaming is automatically stopped)

    CloseWindow();              // Close window and OpenGL context
    //--------------------------------------------------------------------------------------

    return 0;
}
void atualizaFrame(float *const ptrTimer, int *const ptrFrame){
    *ptrTimer = 0;
    *ptrFrame += 1;
}

void carregaImagemaquiles(Texture2D Imagem, int Frame, float larguraFrame, 
                    float *const PosX, float *const PosY, long int Tecla)
{
    if (Tecla == KEY_A){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX -= 3, *PosY},
                WHITE);
    }
    else if (Tecla == KEY_D){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX += 3, *PosY},
                WHITE);
    }
    else if (Tecla == KEY_W){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX, *PosY},
                WHITE);
    }
    else{
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)larguraFrame*Frame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX, *PosY},
                WHITE);
    }
}
void carregaImagemheitor(Texture2D Imagem, int Frame, float larguraFrame, 
                    float *const PosX, float *const PosY, long int Tecla)
{
    if (Tecla == KEY_J){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX -= 3, *PosY},
                WHITE);
    }
    else if (Tecla == KEY_L){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX += 3, *PosY},
                WHITE);
    }
    else if (Tecla == KEY_I){
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)Frame * larguraFrame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX, *PosY},
                WHITE);
    }
    else{
        DrawTextureRec(
                Imagem, 
                (Rectangle){
                    (float)larguraFrame*Frame, 
                    0, 
                    larguraFrame, 
                    Imagem.height}, 
                (Vector2){*PosX, *PosY},
                WHITE);
    }
}
float diminui_vida_aquiles(float diminui){
    diminui-=0.25;
    return diminui;
}
void diminui_vida_heitor(float *muda_tam, float *muda_pos){
    (*muda_tam)-=0.25;
    (*muda_pos)+=0.25;
}
